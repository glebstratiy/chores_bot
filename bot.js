require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const mongoose = require('mongoose');
const cron = require('node-cron');

const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });
const GROUP_ID = process.env.GROUP_ID;


mongoose.connect('mongodb+srv://admin:admin@cluster0.clzvh.mongodb.net/');

// –°—Ö–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const UserSchema = new mongoose.Schema({
    userId: Number,
    name: String,
    points: { type: Number, default: 0 },
    previousTask: { type: String, default: null } // –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–¥–∞—á—É
});
const User = mongoose.model('User', UserSchema);

// –°—Ö–µ–º–∞ –∑–∞–¥–∞—á —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
const TaskSchema = new mongoose.Schema({
    name: String,
    assignedTo: Number,
    difficulty: { type: String, enum: ['easy', 'medium', 'hard'], default: 'medium' },
    completed: { type: Boolean, default: false }
});
const Task = mongoose.model('Task', TaskSchema);

const taskCreationState = new Map();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
bot.onText(/\/sync_users/, async (msg) => {
    if (msg.from.first_name !== "–≥–ª–µ–±") {
        return bot.sendMessage(msg.chat.id, '‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    }    
    if (msg.chat.id !== Number(GROUP_ID)) return;

    try {
        const chatMembers = await bot.getChatAdministrators(GROUP_ID);
        let addedUsers = [];
        
        for (const member of chatMembers) {
            if (!member.user.is_bot) {
                await User.findOneAndUpdate(
                    { userId: member.user.id },
                    { name: member.user.first_name, previousTask: null },
                    { upsert: true }
                );
                addedUsers.push(member.user.first_name);
            }
        }
        
        const userList = addedUsers.length > 0 ? addedUsers.join(', ') : '–ù–µ—Ç –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤';
        bot.sendMessage(GROUP_ID, `‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã! –î–æ–±–∞–≤–ª–µ–Ω—ã: ${userList}`);
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã:', err);
        bot.sendMessage(GROUP_ID, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.');
    }
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
bot.onText(/\/add_task/, (msg) => {
    if (msg.from.first_name !== "–≥–ª–µ–±") {
        return bot.sendMessage(msg.chat.id, '‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    }  
    taskCreationState.set(msg.from.id, { step: 1 });
    bot.sendMessage(msg.chat.id, 'üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
bot.on('message', async (msg) => {
    const userState = taskCreationState.get(msg.from.id);
    if (!userState) return;

    if (userState.step === 1) {
        userState.taskName = msg.text;
        userState.step = 2;
        bot.sendMessage(msg.chat.id, 'üìå –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å:', {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üü¢ –õ–µ–≥–∫–æ', callback_data: 'easy' },
                        { text: 'üü† –°—Ä–µ–¥–Ω–µ', callback_data: 'medium' },
                        { text: 'üî¥ –°–ª–æ–∂–Ω–æ', callback_data: 'hard' }
                    ]
                ]
            }
        });
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
bot.on('callback_query', async (callbackQuery) => {
    const userId = callbackQuery.from.id;
    const userState = taskCreationState.get(userId);
    if (!userState || userState.step !== 2) return;

    const difficulty = callbackQuery.data;
    const taskName = userState.taskName;

    await Task.create({ name: taskName, difficulty });
    bot.sendMessage(GROUP_ID, `‚úÖ –ó–∞–¥–∞—á–∞ "${taskName}" –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å —É—Ä–æ–≤–Ω–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ "${difficulty}"!`);
    taskCreationState.delete(userId);
});

// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å –≤—ã–±–æ—Ä–æ–º –∏–∑ —Å–ø–∏—Å–∫–∞
bot.onText(/\/delete_task/, async (msg) => {
    if (msg.from.first_name !== "–≥–ª–µ–±") {
        return bot.sendMessage(msg.chat.id, '‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    }  
    const tasks = await Task.find();
    if (tasks.length === 0) return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.');

    const keyboard = tasks.map(task => [{ text: task.name, callback_data: `delete_${task.name}` }]);
    bot.sendMessage(msg.chat.id, 'üóë –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', {
        reply_markup: { inline_keyboard: keyboard }
    });
});

bot.on('callback_query', async (callbackQuery) => {
    if (callbackQuery.data.startsWith('delete_')) {
        const taskName = callbackQuery.data.replace('delete_', '');
        await Task.findOneAndDelete({ name: taskName });
        bot.sendMessage(GROUP_ID, `‚úÖ –ó–∞–¥–∞—á–∞ "${taskName}" —É–¥–∞–ª–µ–Ω–∞!`);
    }
});

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å –≤—ã–±–æ—Ä–æ–º –∏–∑ —Å–ø–∏—Å–∫–∞
bot.onText(/\/edit_task/, async (msg) => {
    if (msg.from.first_name !== "–≥–ª–µ–±") {
        return bot.sendMessage(msg.chat.id, '‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    }  
    const tasks = await Task.find();
    if (tasks.length === 0) return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.');

    const keyboard = tasks.map(task => [{ text: task.name, callback_data: `edit_${task.name}` }]);
    bot.sendMessage(msg.chat.id, '‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', {
        reply_markup: { inline_keyboard: keyboard }
    });
});

bot.on('callback_query', async (callbackQuery) => {
    if (callbackQuery.data.startsWith('edit_')) {
        const taskName = callbackQuery.data.replace('edit_', '');
        bot.sendMessage(callbackQuery.message.chat.id, `üîß –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è "${taskName}":`, {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üü¢ –õ–µ–≥–∫–æ', callback_data: `set_easy_${taskName}` },
                        { text: 'üü† –°—Ä–µ–¥–Ω–µ', callback_data: `set_medium_${taskName}` },
                        { text: 'üî¥ –°–ª–æ–∂–Ω–æ', callback_data: `set_hard_${taskName}` }
                    ]
                ]
            }
        });
    }
});

bot.on('callback_query', async (callbackQuery) => {
    if (callbackQuery.data.startsWith('set_')) {
        const [_, difficulty, taskName] = callbackQuery.data.split('_');
        await Task.findOneAndUpdate({ name: taskName }, { difficulty });
        bot.sendMessage(GROUP_ID, `‚úÖ –°–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏ "${taskName}" –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ "${difficulty}"!`);
    }
});

// –§—É–Ω–∫—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á
async function assignTasks() {
    const users = await User.find();
    const tasks = await Task.find();
    if (users.length === 0 || tasks.length === 0) return;

    let assignedTasks = [];
    for (const user of users) {
        // –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
        let availableTasks = tasks.filter(task => task.name !== user.previousTask);
        if (availableTasks.length === 0) availableTasks = tasks; // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á, –¥–∞–µ–º –ª—é–±—É—é

        const task = availableTasks[Math.floor(Math.random() * availableTasks.length)];
        await Task.findOneAndUpdate({ name: task.name }, { assignedTo: user.userId, completed: false });

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ previousTask
        await User.findOneAndUpdate({ userId: user.userId }, { previousTask: task.name });
        
        assignedTasks.push(`üìå ${task.name} ‚Äì ${user.name}`);
    }

    bot.sendMessage(GROUP_ID, `üì¢ *–ù–æ–≤—ã–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é:*

${assignedTasks.join('\n')}`, { parse_mode: 'Markdown' });
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ –ø—è—Ç–Ω–∏—Ü–∞–º –≤ 18:00
cron.schedule('0 18 * * 5', async () => {
    await assignTasks();
}, {
    timezone: "Europe/Kiev"
}, {
    timezone: "Europe/Kiev"
});

// –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 00:00
cron.schedule('0 0 * * 1', async () => {
    const overdueTasks = await Task.find({ completed: false });
    for (const task of overdueTasks) {
        await User.findOneAndUpdate({ userId: task.assignedTo }, { $inc: { points: -1 } });
    }
    await Task.updateMany({}, { completed: false, assignedTo: null });
    bot.sendMessage(GROUP_ID, '‚è≥ –í—Å–µ –∑–∞–¥–∞—á–∏ —Å–±—Ä–æ—à–µ–Ω—ã, –Ω–æ–≤–∞—è –Ω–µ–¥–µ–ª—è –Ω–∞—á–∞–ª–∞—Å—å!');
}, {
    timezone: "Europe/Kiev"
});

// üïõ –°–±—Ä–æ—Å –æ—á–∫–æ–≤ –≤ 00:00 –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞
cron.schedule('0 0 1 * *', async () => {
    try {
        await User.updateMany({}, { points: 0 });
        console.log('‚úÖ –í—Å–µ –æ—á–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –¥–æ 0!');
        bot.sendMessage(GROUP_ID, 'üîÑ –ù–æ–≤—ã–π –º–µ—Å—è—Ü! –í—Å–µ –æ—á–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –¥–æ 0.');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –æ—á–∫–æ–≤:', error);
    }
}, {
    timezone: "Europe/Kiev"
});

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
bot.onText(/\/done/, async (msg) => {
    const userId = msg.from.id;
    const task = await Task.findOne({ assignedTo: userId, completed: false });
    if (!task) return bot.sendMessage(msg.chat.id, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á!');
    
    await Task.findOneAndUpdate({ assignedTo: userId, completed: false }, { completed: true });
    await User.findOneAndUpdate({ userId }, { $inc: { points: 1 } });
    bot.sendMessage(GROUP_ID, `‚úÖ ${msg.from.first_name} –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞—á—É: *${task.name}*! (+1 –±–∞–ª–ª)`, { parse_mode: 'Markdown' });
});

// –†—É—á–Ω–æ–µ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á
bot.onText(/\/reset_tasks/, async (msg) => {
    if (msg.from.first_name !== "–≥–ª–µ–±") {
        return bot.sendMessage(msg.chat.id, '‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    }  
    await assignTasks();
    bot.sendMessage(GROUP_ID, 'üîÑ –ó–∞–¥–∞—á–∏ –±—ã–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∑–∞–Ω–æ–≤–æ!');
});

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á
bot.onText(/\/status/, async (msg) => {
    const tasks = await Task.find();
    if (tasks.length === 0) return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ userId -> name
    const users = await User.find();
    const userMap = {};
    users.forEach(user => {
        userMap[user.userId] = user.name;
    });

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å –∏–º–µ–Ω–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const statusList = tasks.map(task => {
        const assignedName = userMap[task.assignedTo] || "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π";
        return `üìå ${task.name} ‚Äì ${task.completed ? '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ' : '‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'} (üë§ ${assignedName})`;
    }).join('\n');

    bot.sendMessage(GROUP_ID, `üìã *–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á:*\n\n${statusList}`, { parse_mode: 'Markdown' });
});

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –æ—á–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
bot.onText(/\/points/, async (msg) => {
    const users = await User.find().sort({ points: -1 });
    if (users.length === 0) return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ.');
    
    const pointsList = users.map(user => `üë§ ${user.name}: ${user.points} –±–∞–ª–ª–æ–≤`).join('\n');
    bot.sendMessage(GROUP_ID, `üèÜ *–†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n\n${pointsList}`, { parse_mode: 'Markdown' });
});

module.exports = bot;
